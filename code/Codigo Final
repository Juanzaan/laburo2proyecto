// ===========================================
// BLOQUE 1: DECLARACIÓN DE VARIABLES GLOBALES
// Aquí se definen las variables que serán accesibles
// desde cualquier parte del programa.
// ===========================================
int leds[] = {10, 11, 8, 9}; // Arreglo con los pines digitales donde están conectados los LEDs
int distanceCm;              // Variable para almacenar la distancia medida por el sensor ultrasónico

// ===========================================
// BLOQUE 2: FUNCIÓN SETUP()
// Se ejecuta una sola vez al inicio del programa.
// Ideal para configuraciones iniciales de pines y componentes.
// ===========================================
void setup() {
  Serial.begin(9600); // Inicia la comunicación serial a 9600 baudios para depuración

  // Configura los pines de los LEDs como salidas y los apaga inicialmente
  for (int i = 0; i < 4; i++) {
    pinMode(leds[i], OUTPUT);
    digitalWrite(leds[i], LOW);
  }

  // Configura los pines digitales para controlar la dirección de los motores
  pinMode(2, OUTPUT);   // Pin para la dirección del Motor A
  pinMode(4, OUTPUT);   // Pin para la dirección del Motor B
  digitalWrite(2, LOW); // Asegura que el Motor A esté en una dirección predeterminada o detenido
  digitalWrite(4, LOW); // Asegura que el Motor B esté en una dirección predeterminada o detenido

  // Configura los pines PWM para controlar la velocidad de los motores
  pinMode(3, OUTPUT);   // Pin PWM para la velocidad del Motor A
  pinMode(5, OUTPUT);   // Pin PWM para la velocidad del Motor B
  analogWrite(3, 0);    // Detiene el Motor A al inicio (velocidad 0)
  analogWrite(5, 0);    // Detiene el Motor B al inicio (velocidad 0)

  // Configura los pines del sensor ultrasónico
  pinMode(7, OUTPUT); // Pin TRIG (disparo de la onda ultrasónica)
  pinMode(6, INPUT);  // Pin ECHO (recepción de la onda ultrasónica reflejada)
}

// ===========================================
// BLOQUE 3: FUNCIÓN setLED()
// Función auxiliar para controlar el estado de los LEDs.
// Enciende un LED específico o apaga todos.
// ===========================================
void setLED(int idx) {
  for (int i = 0; i < 4; i++) {
    // Si 'i' es igual al índice 'idx' pasado, enciende el LED; de lo contrario, lo apaga.
    // Si 'idx' es -1, o un índice inválido, todos los LEDs se apagarán.
    digitalWrite(leds[i], (i == idx) ? HIGH : LOW);
  }
}

// ===========================================
// BLOQUE 4: FUNCIÓN LOOP()
// Se ejecuta repetidamente después de setup().
// Contiene la lógica principal del programa (lectura de sensor, control de motores y LEDs).
// ===========================================
void loop() {
  distanceCm = distanciaCM(); // Llama a la función para medir la distancia
  Serial.println(distanceCm); // Imprime la distancia en el monitor serial para depuración

  // --- Lógica de Control Basada en la Distancia ---

  // Condición 0: Distancia fuera de un rango de operación seguro (muy cerca o muy lejos)
  if (distanceCm < 2 || distanceCm > 32) {
    setLED(-1); // Apaga todos los LEDs
    digitalWrite(2, LOW);  analogWrite(3, 0); // Detiene Motor A
    digitalWrite(4, LOW);  analogWrite(5, 0); // Detiene Motor B
    Serial.println("Distancia fuera de rango (menos de 2 o más de 32 cm)");
  }
  // Condición 1: Distancia entre 2 cm (inclusive) y 8 cm (exclusivo)
  else if (distanceCm >= 2 && distanceCm < 8) {
    setLED(0); // Enciende solo LED[0]
    digitalWrite(2, HIGH);  analogWrite(3, 40); // Motor A avanza a velocidad 40
    digitalWrite(4, LOW);   analogWrite(5, 0);  // Motor B detenido
    Serial.println("Distancia: 2 a 8 cm");
  }
  // Condición 2: Distancia entre 10 cm (inclusive) y 16 cm (exclusivo)
  else if (distanceCm >= 10 && distanceCm < 16) {
    setLED(1); // Enciende solo LED[1]
    digitalWrite(2, LOW);   analogWrite(3, 0);  // Motor A detenido
    digitalWrite(4, HIGH);  analogWrite(5, 70); // Motor B avanza a velocidad 70
    Serial.println("Distancia: 10 a 16 cm");
  }
  // Condición 3: Distancia entre 18 cm (inclusive) y 24 cm (exclusivo)
  else if (distanceCm >= 18 && distanceCm < 24) {
    setLED(2); // Enciende solo LED[2]
    digitalWrite(2, HIGH);  analogWrite(3, 70); // Motor A avanza a velocidad 70
    digitalWrite(4, HIGH);  analogWrite(5, 70); // Motor B avanza a velocidad 70
    Serial.println("Distancia: 18 a 24 cm");
  }
  // Condición 4 (por defecto): Cualquier otra distancia no cubierta por las anteriores
  // Esto incluye, por ejemplo, el rango de 26 cm a 32 cm.
  else {
    setLED(3); // Enciende solo LED[3]
    digitalWrite(2, LOW);   analogWrite(3, 0); // Detiene Motor A
    digitalWrite(4, LOW);   analogWrite(5, 0); // Detiene Motor B
    Serial.println("Distancia: 26 a 32 cm (o cualquier otra distancia no cubierta)");
  }
}

// ===========================================
// BLOQUE 5: FUNCIÓN distanciaCM()
// Calcula la distancia en centímetros usando el sensor ultrasónico.
// ===========================================
int distanciaCM() {
  digitalWrite(7, HIGH);        // Envía un pulso de 10us al pin TRIG para emitir la onda
  delayMicroseconds(10);
  digitalWrite(7, LOW);

  long tiempo = pulseIn(6, HIGH); // Mide la duración del pulso en el pin ECHO (tiempo de viaje de la onda)

  // Calcula la distancia: (tiempo en microsegundos * velocidad del sonido) / 2
  // (La división por 2 es porque el tiempo incluye el viaje de ida y vuelta)
  return tiempo * 0.0343 / 2; // 0.0343 cm/us es la velocidad del sonido en el aire
}
